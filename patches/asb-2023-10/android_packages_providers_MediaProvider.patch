# PWD: packages/providers/MediaProvider
diff --git a/src/com/android/providers/media/MediaProvider.java b/src/com/android/providers/media/MediaProvider.java
index 9032644e..0887bd6a 100644
--- a/src/com/android/providers/media/MediaProvider.java
+++ b/src/com/android/providers/media/MediaProvider.java
@@ -1522,17 +1522,25 @@ public class MediaProvider extends ContentProvider {
         values.remove(ImageColumns.BUCKET_DISPLAY_NAME);
         values.remove(ImageColumns.GROUP_ID);
         values.remove(ImageColumns.VOLUME_NAME);
         values.remove(ImageColumns.RELATIVE_PATH);
         values.remove(ImageColumns.PRIMARY_DIRECTORY);
         values.remove(ImageColumns.SECONDARY_DIRECTORY);
 
-        final String data = values.getAsString(MediaColumns.DATA);
+        String data = values.getAsString(MediaColumns.DATA);
         if (TextUtils.isEmpty(data)) return;
 
+        try {
+            data = new File(data).getCanonicalPath();
+            values.put(MediaColumns.DATA, data);
+        } catch (IOException e) {
+            throw new IllegalArgumentException(
+                    String.format(Locale.ROOT, "Invalid file path:%s in request.", data));
+        }
+
         final File file = new File(data);
         final File fileLower = new File(data.toLowerCase());
 
         values.put(ImageColumns.VOLUME_NAME, extractVolumeName(data));
         values.put(ImageColumns.RELATIVE_PATH, extractRelativePath(data));
         values.put(ImageColumns.DISPLAY_NAME, extractDisplayName(data));
 
@@ -2306,23 +2314,32 @@ public class MediaProvider extends ContentProvider {
         } else {
             return MediaStore.VOLUME_INTERNAL;
         }
     }
 
     private static @Nullable String extractRelativePath(@Nullable String data) {
         if (data == null) return null;
-        final Matcher matcher = PATTERN_RELATIVE_PATH.matcher(data);
+
+        final String path;
+        try {
+            path = getCanonicalPath(data);
+        } catch (IOException e) {
+            Log.d(TAG, "Unable to get canonical path from invalid data path: " + data, e);
+            return null;
+        }
+
+        final Matcher matcher = PATTERN_RELATIVE_PATH.matcher(path);
         if (matcher.find()) {
-            final int lastSlash = data.lastIndexOf('/');
+            final int lastSlash = path.lastIndexOf('/');
             if (lastSlash == -1 || lastSlash < matcher.end()) {
                 // This is a file in the top-level directory, so relative path is "/"
                 // which is different than null, which means unknown path
                 return "/";
             } else {
-                return data.substring(matcher.end(), lastSlash + 1);
+                return path.substring(matcher.end(), lastSlash + 1);
             }
         } else {
             return null;
         }
     }
 
     private static @Nullable String extractDisplayName(@Nullable String data) {
@@ -4179,38 +4196,53 @@ public class MediaProvider extends ContentProvider {
             db.endTransaction();
         }
     }
 
     @Override
     public Bundle call(String method, String arg, Bundle extras) {
         switch (method) {
-            case MediaStore.SCAN_FILE_CALL:
+            case MediaStore.SCAN_FILE_CALL: {
+                final LocalCallingIdentity token = clearLocalCallingIdentity();
+                final CallingIdentity providerToken = clearCallingIdentity();
+
+                final Uri uri;
+                try {
+                    final Uri fileUri = extras.getParcelable(Intent.EXTRA_STREAM);
+                    File file;
+                    try {
+                        file = getCanonicalFile(fileUri.getPath());
+                    } catch (IOException e) {
+                        file = null;
+                    }
+
+                    uri = file != null ? MediaScanner.instance(getContext()).scanFile(file) : null;
+                } finally {
+                    restoreCallingIdentity(providerToken);
+                    restoreLocalCallingIdentity(token);
+                }
+
+                final Bundle res = new Bundle();
+                res.putParcelable(Intent.EXTRA_STREAM, uri);
+                return res;
+            }
             case MediaStore.SCAN_VOLUME_CALL: {
                 final LocalCallingIdentity token = clearLocalCallingIdentity();
                 final CallingIdentity providerToken = clearCallingIdentity();
+
                 try {
                     final Uri uri = extras.getParcelable(Intent.EXTRA_STREAM);
                     final File file = new File(uri.getPath());
-                    final Bundle res = new Bundle();
-                    switch (method) {
-                        case MediaStore.SCAN_FILE_CALL:
-                            res.putParcelable(Intent.EXTRA_STREAM,
-                                    MediaScanner.instance(getContext()).scanFile(file));
-                            break;
-                        case MediaStore.SCAN_VOLUME_CALL:
-                            MediaService.onScanVolume(getContext(), Uri.fromFile(file));
-                            break;
-                    }
-                    return res;
+                    MediaService.onScanVolume(getContext(), Uri.fromFile(file));
                 } catch (IOException e) {
                     throw new RuntimeException(e);
                 } finally {
                     restoreCallingIdentity(providerToken);
                     restoreLocalCallingIdentity(token);
                 }
+                return Bundle.EMPTY;
             }
             case MediaStore.UNHIDE_CALL: {
                 throw new UnsupportedOperationException();
             }
             case MediaStore.RETRANSLATE_CALL: {
                 localizeTitles();
                 return null;
@@ -6690,8 +6722,35 @@ public class MediaProvider extends ContentProvider {
             } else {
                 s.append(": pid=" + android.os.Process.myPid());
                 s.append(", fingerprint=" + Build.FINGERPRINT);
             }
         }
         return s.toString();
     }
+
+    /**
+     * Returns the canonical {@link File} for the provided abstract pathname.
+     *
+     * @return The canonical pathname string denoting the same file or directory as this abstract
+     *         pathname
+     * @see File#getCanonicalFile()
+     */
+    @NonNull
+    public static File getCanonicalFile(@NonNull String path) throws IOException {
+        Objects.requireNonNull(path);
+        return new File(path).getCanonicalFile();
+    }
+
+    /**
+     * Returns the canonical pathname string of the provided abstract pathname.
+     *
+     * @return The canonical pathname string denoting the same file or directory as this abstract
+     *         pathname.
+     * @see File#getCanonicalPath()
+     */
+    @NonNull
+    public static String getCanonicalPath(@NonNull String path) throws IOException {
+        Objects.requireNonNull(path);
+        return new File(path).getCanonicalPath();
+    }
+
 }
diff --git a/src/com/android/providers/media/scan/LegacyMediaScanner.java b/src/com/android/providers/media/scan/LegacyMediaScanner.java
index 5041265c..eb28b5b5 100644
--- a/src/com/android/providers/media/scan/LegacyMediaScanner.java
+++ b/src/com/android/providers/media/scan/LegacyMediaScanner.java
@@ -12,51 +12,74 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 package com.android.providers.media.scan;
 
+import static java.util.Objects.requireNonNull;
+
+import android.annotation.NonNull;
 import android.content.Context;
 import android.net.Uri;
 import android.os.Trace;
 import android.provider.MediaStore;
+import android.util.Log;
 
 import libcore.net.MimeUtils;
 
 import java.io.File;
+import java.io.IOException;
 
 public class LegacyMediaScanner implements MediaScanner {
+    private static final String TAG = "LegacyMediaScanner";
+
     private final Context mContext;
 
     public LegacyMediaScanner(Context context) {
         mContext = context;
     }
 
     @Override
     public Context getContext() {
         return mContext;
     }
 
     @Override
     public void scanDirectory(File file) {
+        requireNonNull(file);
+        try {
+            file = file.getCanonicalFile();
+        } catch (IOException e) {
+            Log.e(TAG, "Couldn't canonicalize directory to scan" + file, e);
+            return;
+        }
+
         final String path = file.getAbsolutePath();
         final String volumeName = MediaStore.getVolumeName(file);
 
         Trace.traceBegin(Trace.TRACE_TAG_DATABASE, "scanDirectory");
         try (android.media.MediaScanner scanner =
                 new android.media.MediaScanner(mContext, volumeName)) {
             scanner.scanDirectories(new String[] { path });
         } finally {
             Trace.traceEnd(Trace.TRACE_TAG_DATABASE);
         }
     }
 
     @Override
-    public Uri scanFile(File file) {
+    public Uri scanFile(@NonNull File file) {
+        requireNonNull(file);
+        try {
+            file = file.getCanonicalFile();
+        } catch (IOException e) {
+            Log.e(TAG, "Couldn't canonicalize file to scan" + file, e);
+            return null;
+        }
+
         final String path = file.getAbsolutePath();
         final String volumeName = MediaStore.getVolumeName(file);
 
         Trace.traceBegin(Trace.TRACE_TAG_DATABASE, "scanFile");
         try (android.media.MediaScanner scanner =
                 new android.media.MediaScanner(mContext, volumeName)) {
             final String ext = path.substring(path.lastIndexOf('.') + 1);
diff --git a/src/com/android/providers/media/scan/ModernMediaScanner.java b/src/com/android/providers/media/scan/ModernMediaScanner.java
index fe0e5cf7..f8f29fb4 100644
--- a/src/com/android/providers/media/scan/ModernMediaScanner.java
+++ b/src/com/android/providers/media/scan/ModernMediaScanner.java
@@ -35,14 +35,16 @@ import static android.media.MediaMetadataRetriever.METADATA_KEY_VIDEO_WIDTH;
 import static android.media.MediaMetadataRetriever.METADATA_KEY_YEAR;
 import static android.os.Trace.TRACE_TAG_DATABASE;
 import static android.provider.MediaStore.AUTHORITY;
 import static android.provider.MediaStore.UNKNOWN_STRING;
 import static android.text.format.DateUtils.HOUR_IN_MILLIS;
 import static android.text.format.DateUtils.MINUTE_IN_MILLIS;
 
+import static java.util.Objects.requireNonNull;
+
 import android.annotation.CurrentTimeMillisLong;
 import android.annotation.CurrentTimeSecondsLong;
 import android.annotation.NonNull;
 import android.annotation.Nullable;
 import android.content.ContentProviderClient;
 import android.content.ContentProviderOperation;
 import android.content.ContentProviderResult;
@@ -157,23 +159,40 @@ public class ModernMediaScanner implements MediaScanner {
 
     @Override
     public Context getContext() {
         return mContext;
     }
 
     @Override
-    public void scanDirectory(File file) {
+    public void scanDirectory(@NonNull File file) {
+        requireNonNull(file);
+        try {
+            file = file.getCanonicalFile();
+        } catch (IOException e) {
+            Log.e(TAG, "Couldn't canonicalize directory to scan" + file, e);
+            return;
+        }
+
         try (Scan scan = new Scan(file)) {
             scan.run();
         } catch (OperationCanceledException ignored) {
         }
     }
 
     @Override
-    public Uri scanFile(File file) {
+    @Nullable
+    public Uri scanFile(@NonNull File file) {
+        requireNonNull(file);
+        try {
+            file = file.getCanonicalFile();
+        } catch (IOException e) {
+            Log.e(TAG, "Couldn't canonicalize file to scan" + file, e);
+            return null;
+        }
+
         try (Scan scan = new Scan(file)) {
             scan.run();
             return scan.mFirstResult;
         } catch (OperationCanceledException ignored) {
             return null;
         }
     }
