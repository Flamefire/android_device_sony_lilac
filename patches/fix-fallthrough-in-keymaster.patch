diff --git a/key_blob_utils/ocb.c b/key_blob_utils/ocb.c
index 9a68182..299a0dd 100644
--- a/key_blob_utils/ocb.c
+++ b/key_blob_utils/ocb.c
@@ -335,6 +335,16 @@ static inline block double_block(block b) {
 
 #endif
 
+#ifndef __has_attribute
+#define __has_attribute(x) 0
+#endif
+
+#if __has_attribute(fallthrough)
+#define __fallthrough __attribute__((__fallthrough__));
+#else
+#define __fallthrough
+#endif
+
 /* ----------------------------------------------------------------------- */
 /* AES - Code uses OpenSSL API. Other implementations get mapped to it.    */
 /* ----------------------------------------------------------------------- */
@@ -894,19 +904,26 @@ static void process_ad(ae_ctx* ctx, const void* ad, int ad_len, int final) {
 #if (BPI == 8)
             case 8:
                 ad_checksum = xor_block(ad_checksum, ta[7]);
+                __fallthrough;
             case 7:
                 ad_checksum = xor_block(ad_checksum, ta[6]);
+                __fallthrough;
             case 6:
                 ad_checksum = xor_block(ad_checksum, ta[5]);
+                __fallthrough;
             case 5:
                 ad_checksum = xor_block(ad_checksum, ta[4]);
+                __fallthrough;
 #endif
             case 4:
                 ad_checksum = xor_block(ad_checksum, ta[3]);
+                __fallthrough;
             case 3:
                 ad_checksum = xor_block(ad_checksum, ta[2]);
+                __fallthrough;
             case 2:
                 ad_checksum = xor_block(ad_checksum, ta[1]);
+                __fallthrough;
             case 1:
                 ad_checksum = xor_block(ad_checksum, ta[0]);
             }
@@ -1066,17 +1083,23 @@ int ae_encrypt(ae_ctx* ctx, const void* nonce, const void* pt, int pt_len, const
 #if (BPI == 8)
         case 7:
             ctp[6] = xor_block(ta[6], oa[6]);
+            __fallthrough;
         case 6:
             ctp[5] = xor_block(ta[5], oa[5]);
+            __fallthrough;
         case 5:
             ctp[4] = xor_block(ta[4], oa[4]);
+            __fallthrough;
         case 4:
             ctp[3] = xor_block(ta[3], oa[3]);
+            __fallthrough;
 #endif
         case 3:
             ctp[2] = xor_block(ta[2], oa[2]);
+            __fallthrough;
         case 2:
             ctp[1] = xor_block(ta[1], oa[1]);
+            __fallthrough;
         case 1:
             ctp[0] = xor_block(ta[0], oa[0]);
         }
@@ -1273,22 +1296,28 @@ int ae_decrypt(ae_ctx* ctx, const void* nonce, const void* ct, int ct_len, const
         case 7:
             ptp[6] = xor_block(ta[6], oa[6]);
             checksum = xor_block(checksum, ptp[6]);
+            __fallthrough;
         case 6:
             ptp[5] = xor_block(ta[5], oa[5]);
             checksum = xor_block(checksum, ptp[5]);
+            __fallthrough;
         case 5:
             ptp[4] = xor_block(ta[4], oa[4]);
             checksum = xor_block(checksum, ptp[4]);
+            __fallthrough;
         case 4:
             ptp[3] = xor_block(ta[3], oa[3]);
             checksum = xor_block(checksum, ptp[3]);
+            __fallthrough;
 #endif
         case 3:
             ptp[2] = xor_block(ta[2], oa[2]);
             checksum = xor_block(checksum, ptp[2]);
+            __fallthrough;
         case 2:
             ptp[1] = xor_block(ta[1], oa[1]);
             checksum = xor_block(checksum, ptp[1]);
+            __fallthrough;
         case 1:
             ptp[0] = xor_block(ta[0], oa[0]);
             checksum = xor_block(checksum, ptp[0]);
