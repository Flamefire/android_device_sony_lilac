# PWD: system/core

Based on the work from Havoc-OS:
https://github.com/Havoc-OS/android_system_core/blob/e7243f0a78344f7c28b7fa2542fc9b215b9c83f2/init/property_service.cpp

Combined with:
"fastboot: Revert to Android 11 method of checking lock status" https://github.com/ProtonAOSP/android_system_core/commit/497ada563

diff --git a/init/property_service.cpp b/init/property_service.cpp
index 42dd5afcb..c125e8a2b 100644
--- a/init/property_service.cpp
+++ b/init/property_service.cpp
@@ -45,6 +45,7 @@
 #include <optional>
 #include <queue>
 #include <thread>
+#include <utility>
 #include <vector>
 
 #include <InitProperties.sysprop.h>
@@ -108,6 +109,8 @@ struct PropertyAuditData {
     const char* name;
 };
 
+static bool weaken_prop_override_security = false;
+
 static int PropertyAuditCallback(void* data, security_class_t /*cls*/, char* buf, size_t len) {
     auto* d = reinterpret_cast<PropertyAuditData*>(data);
 
@@ -179,7 +182,7 @@ static uint32_t PropertySet(const std::string& name, const std::string& value, s
     prop_info* pi = (prop_info*) __system_property_find(name.c_str());
     if (pi != nullptr) {
         // ro.* properties are actually "write-once".
-        if (StartsWith(name, "ro.")) {
+        if (StartsWith(name, "ro.") && !weaken_prop_override_security) {
             *error = "Read-only property was already set";
             return PROP_ERROR_READ_ONLY_PROPERTY;
         }
@@ -757,7 +760,65 @@ static void update_sys_usb_config() {
     }
 }
 
+static std::pair<const char *, const char *> snet_props[] = {
+    {"ro.boot.flash.locked", "1"},
+    {"ro.boot.vbmeta.device_state", "locked"},
+    {"ro.boot.verifiedbootstate", "green"},
+    {"ro.build.tags", "release-keys"},
+    {"ro.build.type", "user"},
+    {"ro.debuggable", "0"},
+    {"ro.odm.build.tags", "release-keys"},
+    {"ro.odm.build.type", "user"},
+    {"ro.product.build.type", "user"},
+    {"ro.system.build.tags", "release-keys"},
+    {"ro.system.build.type", "user"},
+    {"ro.vendor.build.tags", "release-keys"},
+    {"ro.vendor.build.type", "user"},
+    {"vendor.boot.vbmeta.device_state", "locked"},
+    {"vendor.boot.verifiedbootstate", "green"},
+    // Those 2 must come last!
+    {"ro.build.version.security_patch", "2019-09-01"},
+    {"ro.build.version.real_security_patch", nullptr},
+};
+
+static void workaround_snet_properties() {
+    const std::string build_type = android::base::GetProperty("ro.build.type", "");
+
+    // Weaken property override security to set safetynet props
+    weaken_prop_override_security = true;
+
+    std::string error;
+
+    // Hide all sensitive props if not eng build
+    if (build_type != "eng") {
+        LOG(INFO) << "snet: Hiding sensitive props";
+        // Store real security patch level before overwriting it
+        const std::string security_patch = android::base::GetProperty((std::end(snet_props) - 2)->first, "");
+        (std::end(snet_props) - 1)->second = security_patch.c_str();
+        for (const auto& [name, value]: snet_props) {
+            if (PropertySet(name, value, &error) != PROP_SUCCESS) {
+                LOG(ERROR) << "snet: Could not set '" << name << "' to '" << value << "': " << error;
+            }
+        }
+    }
+
+    // Extra props
+    const std::string build_flavor_key = "ro.build.flavor";
+    std::string build_flavor_value = android::base::GetProperty(build_flavor_key, "");
+    // userdebug -> user
+    if (android::base::EndsWith(build_flavor_value, "userdebug")) {
+        build_flavor_value.resize(build_flavor_value.size() - std::string("debug").size());
+        PropertySet(build_flavor_key, build_flavor_value, &error);
+    }
+
+    // Restore the normal property override security after safetynet props have been set
+    weaken_prop_override_security = false;
+}
+
 static void load_override_properties() {
+    if (!IsRecoveryMode()) {
+        workaround_snet_properties();
+    }
     if (ALLOW_LOCAL_PROP_OVERRIDE) {
         std::map<std::string, std::string> properties;
         load_properties_from_file("/data/local.prop", nullptr, &properties);
diff --git a/fastboot/device/utility.cpp b/fastboot/device/utility.cpp
index 07ad9028c..f9267e0eb 100644
--- a/fastboot/device/utility.cpp
+++ b/fastboot/device/utility.cpp
@@ -204,7 +204,12 @@ std::vector<std::string> ListPartitions(FastbootDevice* device) {
 }
 
 bool GetDeviceLockStatus() {
-    return android::base::GetProperty("ro.boot.verifiedbootstate", "") != "orange";
+    std::string cmdline;
+    // Return lock status true if unable to read kernel command line.
+    if (!android::base::ReadFileToString("/proc/cmdline", &cmdline)) {
+        return true;
+    }
+    return cmdline.find("androidboot.verifiedbootstate=orange") == std::string::npos;
 }
 
 bool UpdateAllPartitionMetadata(FastbootDevice* device, const std::string& super_name,
